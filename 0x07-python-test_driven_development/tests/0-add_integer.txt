===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,it returns their Sum.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 4)
    6

::

    >>> add_integer(2, -4)
    -2

The function also works with float numbers.

::

    >>> add_integer(1.0, 3.0)
    4

Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(0.3, 2.1)
    2

::

    >>> add_integer(-2.0, -1.0)
    -3

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.1, -3)
    -1

The second argument is optional - by default, b = 98.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects  both arguments to be either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("check", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "check")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(1.2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message isprinted for the first argument only.

::

    >>> add_integer("python", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function fails if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Testing  with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(3, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

